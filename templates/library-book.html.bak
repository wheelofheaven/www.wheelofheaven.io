{% extends "base.html" %} {% import "macros/library.html" as library_macros %}
{% block content %}
<div class="library-book">
    {% set book_slug = page.slug %} {% set book_data =
    load_data(path="data/library/" ~ book_slug ~ ".json") %} {% if book_data %}

    <div class="library-book__container">
        <!-- Table of Contents Sidebar -->
        <aside class="library-book__toc">
            <div class="library-book__toc-header">
                <h3 class="library-book__toc-title">Contents</h3>
            </div>
            <nav class="library-book__toc-nav">
                <ul class="library-book__toc-list">
                    {% for chapter in book_data.chapters %}
                    <li
                        class="library-book__toc-item"
                        data-chapter="{{ chapter.n }}"
                    >
                        <a
                            href="#chapter-{{ chapter.n }}"
                            class="library-book__toc-link"
                            onclick="scrollToChapter({{ chapter.n }})"
                        >
                            <span class="library-book__toc-chapter-number"
                                >{{ chapter.n }}</span
                            >
                            <span class="library-book__toc-chapter-title">
                                {% if chapter.title %}{{ chapter.title }}{% else
                                %}Chapter {{ chapter.n }}{% endif %}
                            </span>
                        </a>
                    </li>
                    {% endfor %}
                </ul>
            </nav>
        </aside>

        <!-- Main Content Area -->
        <div class="library-book__content">
            <header class="book-header">
                <h1 class="book-title">
                    {{ library_macros::get_book_title(book_data=book_data,
                    lang=lang) }}
                </h1>

                {% if book_data.primaryLang != lang and
                book_data.titles[book_data.primaryLang] %}
                <p class="book-subtitle">
                    Original: {{ book_data.titles[book_data.primaryLang] }}
                </p>
                {% endif %} {% if book_data.description %}
                <p class="book-description">{{ book_data.description }}</p>
                {% endif %}
            </header>

            <div class="view-controls">
                <div class="progress-indicator">
                    <span id="chapter-progress">Chapter 1</span>
                    <span class="separator">â€¢</span>
                    <span id="paragraph-progress">Paragraph 1/10</span>
                </div>

                <div class="view-buttons">
                    <button
                        onclick="toggleToc()"
                        id="toc-toggle"
                        class="desktop-only"
                        title="Show/Hide Table of Contents"
                    >
                        <svg
                            viewBox="0 0 24 24"
                            fill="none"
                            stroke="currentColor"
                            stroke-width="2"
                        >
                            <line x1="8" y1="6" x2="21" y2="6"></line>
                            <line x1="8" y1="12" x2="21" y2="12"></line>
                            <line x1="8" y1="18" x2="21" y2="18"></line>
                            <line x1="3" y1="6" x2="3.01" y2="6"></line>
                            <line x1="3" y1="12" x2="3.01" y2="12"></line>
                            <line x1="3" y1="18" x2="3.01" y2="18"></line>
                        </svg>
                        <span>Hide Contents</span>
                    </button>

                    <button
                        onclick="toggleOriginalText()"
                        id="original-toggle"
                        title="Show/Hide Original Text"
                    >
                        <svg
                            viewBox="0 0 24 24"
                            fill="none"
                            stroke="currentColor"
                            stroke-width="2"
                        >
                            <path
                                d="M14 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V8z"
                            ></path>
                            <polyline points="14,2 14,8 20,8"></polyline>
                            <line x1="16" y1="13" x2="8" y2="13"></line>
                            <line x1="16" y1="17" x2="8" y2="17"></line>
                            <polyline points="10,9 9,9 8,9"></polyline>
                        </svg>
                        <span>Show Original</span>
                    </button>

                    <button
                        onclick="toggleSideBySide()"
                        id="side-by-side-toggle"
                        style="display: none"
                        title="Toggle Side-by-Side View"
                    >
                        <svg
                            viewBox="0 0 24 24"
                            fill="none"
                            stroke="currentColor"
                            stroke-width="2"
                        >
                            <rect
                                x="3"
                                y="3"
                                width="18"
                                height="18"
                                rx="2"
                                ry="2"
                            ></rect>
                            <line x1="12" y1="3" x2="12" y2="21"></line>
                        </svg>
                        <span>Side-by-Side</span>
                    </button>
                </div>
            </div>

            <main class="chapter-content">
                {% for chapter in book_data.chapters %}
                <section class="chapter" id="chapter-{{ chapter.n }}">
                    <header class="chapter-header">
                        <h2 class="chapter-title">Chapter {{ chapter.n }}</h2>
                        {% if chapter.title %}
                        <p class="chapter-number">{{ chapter.title }}</p>
                        {% endif %}
                    </header>

                    <div class="text-content" id="text-content-{{ chapter.n }}">
                        {% for paragraph in chapter.paragraphs %}
                        <div
                            class="paragraph"
                            id="c{{ chapter.n }}p{{ paragraph.n }}"
                            onclick="selectParagraph('c{{ chapter.n }}p{{ paragraph.n }}')"
                        >
                            <div class="paragraph-number">
                                {{ paragraph.n }}
                            </div>

                            <div class="paragraph-content">
                                <div class="original-text">
                                    {{ paragraph.text }}
                                </div>

                                {% if lang != book_data.primaryLang and
                                paragraph.i18n and paragraph.i18n[lang] %}
                                <div class="translation-text">
                                    {{ paragraph.i18n[lang] }}
                                </div>
                                {% endif %}
                            </div>

                            <button
                                class="share-button"
                                onclick="shareParagraph('c{{ chapter.n }}p{{ paragraph.n }}')"
                                title="Share this paragraph"
                            >
                                <svg
                                    viewBox="0 0 24 24"
                                    fill="none"
                                    stroke="currentColor"
                                    stroke-width="2"
                                >
                                    <path
                                        d="M4 12v8a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2v-8"
                                    ></path>
                                    <polyline points="16,6 12,2 8,6"></polyline>
                                    <line x1="12" y1="2" x2="12" y2="15"></line>
                                </svg>
                            </button>
                        </div>
                        {% endfor %}
                    </div>
                </section>
                {% endfor %}
            </main>

            <nav class="chapter-navigation">
                <button
                    class="nav-button prev"
                    onclick="previousChapter()"
                    id="prev-chapter"
                >
                    <svg
                        viewBox="0 0 24 24"
                        fill="none"
                        stroke="currentColor"
                        stroke-width="2"
                    >
                        <path d="M15 18l-6-6 6-6"></path>
                    </svg>
                    Previous
                </button>

                <div class="chapter-info">
                    <div class="current-chapter" id="current-chapter-display">
                        Chapter 1 of {{ book_data.chapters | length }}
                    </div>
                    <div class="chapter-progress" id="chapter-progress">
                        Reading Chapter 1
                    </div>
                </div>

                <button
                    class="nav-button next"
                    onclick="nextChapter()"
                    id="next-chapter"
                >
                    Next
                    <svg
                        viewBox="0 0 24 24"
                        fill="none"
                        stroke="currentColor"
                        stroke-width="2"
                    >
                        <path d="M9 18l6-6-6-6"></path>
                    </svg>
                </button>
            </nav>

            <nav class="book-navigation">
                <a href="{{ get_url(path='library') }}" class="back-to-library">
                    <svg
                        viewBox="0 0 24 24"
                        fill="none"
                        stroke="currentColor"
                        stroke-width="2"
                    >
                        <path d="M15 18l-6-6 6-6"></path>
                    </svg>
                    Back to Library
                </a>
            </nav>
        </div>
    </div>

    {% else %}
    <div class="book-not-found">
        <h1>Book Not Found</h1>
        <p>The requested book could not be found or failed to load.</p>
        <a href="{{ get_url(path='library') }}">Return to Library</a>
    </div>
    {% endif %}
</div>

<script>
    let currentChapter = 1;
    const totalChapters = {% if book_data and book_data.chapters %}{{ book_data.chapters | length }}{% else %}0{% endif %};
    const bookTitle = "{{ library_macros::get_book_title(book_data=book_data, lang=lang) }}";
    let showingOriginal = false;
    let sideBySide = false;
    let selectedParagraph = null;
    let lastScrollY = 0;
    let viewControlsVisible = true;
    let tocVisible = true;

    function toggleOriginalText() {
        const originalTexts = document.querySelectorAll('.original-text');
        const button = document.getElementById('original-toggle');
        const sideBySideToggle = document.getElementById('side-by-side-toggle');
        showingOriginal = !showingOriginal;

        originalTexts.forEach(text => {
            text.style.display = showingOriginal ? 'block' : 'none';
        });

        // Update button text
        const buttonText = button.querySelector('span');
        if (buttonText) {
            buttonText.textContent = showingOriginal ? 'Hide Original' : 'Show Original';
        }

        // Show/hide side-by-side toggle based on original text visibility
        if (sideBySideToggle) {
            sideBySideToggle.style.display = showingOriginal ? 'flex' : 'none';
        }

        // Reset side-by-side mode if hiding original
        if (!showingOriginal && sideBySide) {
            toggleSideBySide();
        }
    }

    function toggleSideBySide() {
        const textContents = document.querySelectorAll('.text-content');
        const button = document.getElementById('side-by-side-toggle');
        sideBySide = !sideBySide;

        textContents.forEach(content => {
            if (sideBySide) {
                content.classList.add('side-by-side');
            } else {
                content.classList.remove('side-by-side');
            }
        });

        // Update button text
        const buttonText = button.querySelector('span');
        if (buttonText) {
            buttonText.textContent = sideBySide ? 'Single Column' : 'Side-by-Side';
        }

        // Update button class for styling
        if (sideBySide) {
            button.classList.add('active');
        } else {
            button.classList.remove('active');
        }
    }

    function toggleToc() {
        const tocSidebar = document.querySelector('.library-book__toc');
        const container = document.querySelector('.library-book__container');
        const button = document.getElementById('toc-toggle');

        if (!tocSidebar || !container || !button) return;

        tocVisible = !tocVisible;

        if (tocVisible) {
            // Show ToC
            tocSidebar.style.display = 'block';
            container.style.gridTemplateColumns = '280px 1fr';
            button.querySelector('span').textContent = 'Hide Contents';
            button.classList.remove('active');
        } else {
            // Hide ToC
            tocSidebar.style.display = 'none';
            container.style.gridTemplateColumns = '1fr';
            button.querySelector('span').textContent = 'Show Contents';
        }
    }
        }

        function selectParagraph(paragraphId) {
            // Remove selection from all paragraphs
                p.classList.remove('selected');
            });

            // Select the clicked paragraph
            const paragraph = document.getElementById(paragraphId);
            if (paragraph) {
                paragraph.classList.add('selected');
                selectedParagraph = paragraphId;

                // Update URL hash without scrolling
                const newUrl = window.location.pathname + window.location.search + '#' + paragraphId;
                history.replaceState(null, null, newUrl);
            }
        }

        function shareParagraph(paragraphId) {
            const paragraph = document.getElementById(paragraphId);
            if (!paragraph) return;

            let textToCopy = '';

            // Get the paragraph text
            const translatedText = paragraph.querySelector('.translation-text');
            const originalText = paragraph.querySelector('.original-text');

            if (translatedText && translatedText.textContent.trim()) {
                textToCopy = translatedText.textContent.trim();
            } else if (originalText && originalText.textContent.trim()) {
                textToCopy = originalText.textContent.trim();
            }

            if (!textToCopy) {
                if (typeof window.showCopyError === 'function') {
                    window.showCopyError();
                }
                return;
            }

            // Extract chapter and paragraph numbers from ID (format: c1p2 = chapter 1, paragraph 2)
            const match = paragraphId.match(/^c(\d+)p(\d+)$/);
            const chapterNum = match ? match[1] : '?';
            const paraNum = match ? match[2] : '?';

            // Create shareable content with URL
            const currentUrl = window.location.origin + window.location.pathname + '#' + paragraphId;
            const shareText = `"${textToCopy}"\n\nâ€” ${bookTitle}, Chapter ${chapterNum}, Paragraph ${paraNum}\n${currentUrl}`;

            // Check if Web Share API is available and we're on HTTPS
            if (navigator.share && window.location.protocol === 'https:') {
                navigator.share({
                    title: bookTitle + ' - Chapter ' + chapterNum + ', Paragraph ' + paraNum,
                    text: shareText,
                    url: currentUrl
                }).then(() => {
                    if (typeof window.showCopySuccess === 'function') {
                        window.showCopySuccess();
                    }
                }).catch(() => {
                    copyToClipboard(shareText);
                });
            } else {
                copyToClipboard(shareText);
            }
        }

        function copyToClipboard(text) {
            if (navigator.clipboard && window.isSecureContext) {
                navigator.clipboard.writeText(text).then(() => {
                    if (typeof window.showCopySuccess === 'function') {
                        window.showCopySuccess();
                    }
                }).catch(() => {
                    fallbackCopyToClipboard(text);
                });
            } else {
                fallbackCopyToClipboard(text);
            }
        }

        function fallbackCopyToClipboard(text) {
            const textArea = document.createElement('textarea');
            textArea.value = text;
            textArea.style.position = 'fixed';
            textArea.style.left = '-999999px';
            textArea.style.top = '-999999px';
            document.body.appendChild(textArea);
            textArea.focus();
            textArea.select();

            try {
                const successful = document.execCommand('copy');
                document.body.removeChild(textArea);

                if (successful) {
                    if (typeof window.showCopySuccess === 'function') {
                        window.showCopySuccess();
                    }
                } else {
                    throw new Error('execCommand failed');
                }
            } catch (err) {
                document.body.removeChild(textArea);
                if (typeof window.showCopyError === 'function') {
                    window.showCopyError();
                }
            }
        }

        function updateTocHighlight() {
            const tocItems = document.querySelectorAll('.library-book__toc-item');
            const chapters = document.querySelectorAll('.chapter');
            const paragraphs = document.querySelectorAll('.paragraph');

            let activeChapter = null;
            let activeParagraph = null;
            const scrollPosition = window.scrollY + 300;

            // Find active chapter
            chapters.forEach(chapter => {
                const chapterTop = chapter.offsetTop;
                const chapterBottom = chapterTop + chapter.offsetHeight;

                if (scrollPosition >= chapterTop && scrollPosition < chapterBottom) {
                    activeChapter = chapter.id.replace('chapter-', '');
                }
            });

            // Find active paragraph
            paragraphs.forEach(paragraph => {
                const paragraphTop = paragraph.offsetTop;
                const paragraphBottom = paragraphTop + paragraph.offsetHeight;

                if (scrollPosition >= paragraphTop && scrollPosition < paragraphBottom) {
                    activeParagraph = paragraph.id;
                }
            });

            // Update ToC
            tocItems.forEach(item => {
                const chapterNumber = item.dataset.chapter;
                if (chapterNumber === activeChapter) {
                    item.classList.add('active');
                    currentChapter = parseInt(activeChapter);
                } else {
                    item.classList.remove('active');
                }
            });

            // Update progress indicator
            updateProgressIndicator(activeChapter, activeParagraph);
            updateChapterNavigation();
        }

        function updateProgressIndicator(activeChapter, activeParagraphId) {
            const chapterProgress = document.getElementById('chapter-progress');
            const paragraphProgress = document.getElementById('paragraph-progress');

            if (!activeChapter || !chapterProgress || !paragraphProgress) return;

            // Update chapter info
            chapterProgress.textContent = `Chapter ${activeChapter}`;

            // Update paragraph info
            if (activeParagraphId) {
                const match = activeParagraphId.match(/^c(\d+)p(\d+)$/);
                if (match) {
                    const chapterNum = match[1];
                    const paraNum = match[2];

                    // Count total paragraphs in current chapter
                    const currentChapterElement = document.getElementById(`chapter-${chapterNum}`);
                    const totalParagraphs = currentChapterElement ?
                        currentChapterElement.querySelectorAll('.paragraph').length : 0;

                    paragraphProgress.textContent = `Paragraph ${paraNum}/${totalParagraphs}`;
                }
            }
        }

        function updateChapterNavigation() {
            const prevButton = document.getElementById('prev-chapter');
            const nextButton = document.getElementById('next-chapter');
            const currentDisplay = document.getElementById('current-chapter-display');
            const progressDisplay = document.getElementById('chapter-progress');

            if (prevButton) prevButton.classList.toggle('disabled', currentChapter <= 1);
            if (nextButton) nextButton.classList.toggle('disabled', currentChapter >= totalChapters);

            if (currentDisplay) {
                currentDisplay.textContent = `Chapter ${currentChapter} of ${totalChapters}`;
            }

            if (progressDisplay) {
                progressDisplay.textContent = `Reading Chapter ${currentChapter}`;
            }
        }

        function previousChapter() {
            if (currentChapter > 1) {
                currentChapter--;
                scrollToChapter(currentChapter);
            }
        }

        function nextChapter() {
            if (currentChapter < totalChapters) {
                currentChapter++;
                scrollToChapter(currentChapter);
            }
        }

        function scrollToChapter(chapterNumber) {
            const chapter = document.getElementById('chapter-' + chapterNumber);
            if (chapter) {
                chapter.scrollIntoView({
                    behavior: 'smooth',
                    block: 'start'
                });
                currentChapter = chapterNumber;
                updateTocHighlight();
            }
        }





        // Initialize on page load
        document.addEventListener('DOMContentLoaded', function() {
            // Hide original text by default
            toggleOriginalText();

            // Update navigation state
            updateChapterNavigation();

            // Set up scroll listener for ToC highlighting and view-controls behavior
            let ticking = false;
            function handleScroll() {
                if (!ticking) {
                    requestAnimationFrame(function() {
                        updateTocHighlight();
                        handleViewControlsScroll();
                        ticking = false;
                    });
                    ticking = true;
                }
            }

            window.addEventListener('scroll', handleScroll, { passive: true });

            function handleViewControlsScroll() {
                // Only apply auto-hide behavior on mobile/tablet
                if (window.innerWidth > 768) return;

                const currentScrollY = window.scrollY;
                const viewControls = document.querySelector('.view-controls');
                const scrollDelta = Math.abs(currentScrollY - lastScrollY);

                if (!viewControls) return;

                // Only trigger if scroll delta is significant (reduces jitter)
                if (scrollDelta < 10) return;

                // Scrolling down - hide controls
                if (currentScrollY > lastScrollY && currentScrollY > 200) {
                    if (viewControlsVisible) {
                        viewControls.style.transform = 'translateY(-100%)';
                        viewControls.style.opacity = '0';
                        viewControlsVisible = false;
                    }
                }
                // Scrolling up - show controls
                else if (currentScrollY < lastScrollY || currentScrollY <= 100) {
                    if (!viewControlsVisible) {
                        viewControls.style.transform = 'translateY(0)';
                        viewControls.style.opacity = '1';
                        viewControlsVisible = true;
                    }
                }

                lastScrollY = currentScrollY;
            }

            // Initial ToC highlight
            setTimeout(updateTocHighlight, 100);

            // Handle deep linking to paragraphs
            if (window.location.hash) {
                const hashValue = window.location.hash.substring(1);
                // Handle both old format (#paragraph-N) and new format (#c1p2)
                if (hashValue.startsWith('paragraph-')) {
                    // Legacy format - convert to new format assuming chapter 1
                    const paragraphNumber = hashValue.replace('paragraph-', '');
                    const newId = 'c1p' + paragraphNumber;
                    setTimeout(() => {
                        selectParagraph(newId);
                        document.getElementById(newId)?.scrollIntoView({
                            behavior: 'smooth',
                            block: 'center'
                        });
                    }, 500);
                } else if (hashValue.match(/^c\d+p\d+$/)) {
                    // New format
                    setTimeout(() => {
                        selectParagraph(hashValue);
                        document.getElementById(hashValue)?.scrollIntoView({
                            behavior: 'smooth',
                            block: 'center'
                        });
                    }, 500);
                }
            }

            // Handle deep linking to chapters
            if (window.location.hash && window.location.hash.startsWith('#chapter-')) {
                const chapterNumber = window.location.hash.replace('#chapter-', '');
                setTimeout(() => {
                    scrollToChapter(parseInt(chapterNumber));
                }, 500);
            }
        });
    </script>

    {% endblock content %}
</div>
